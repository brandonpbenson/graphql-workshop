# Starter pipeline
# Start with a minimal pipeline that you can customize to build and deploy your code.
# Add steps that build, run tests, deploy, and more:
# https://aka.ms/yaml

trigger:
- main

pool:
  vmImage: ubuntu-latest

steps:
- task: DockerInstaller@0
  displayName: "Install Docker"
  inputs:
    dockerVersion: '17.09.0-ce'
- task: KubectlInstaller@0
  displayName: "Install Kubectl"
  inputs:
    kubectlVersion: 'latest'
- task: Docker@2
  displayName: "Build Host Container"
  inputs:
    containerRegistry: '$(container-registry)'
    repository: 'ccc-oss-graphqlworkshop'
    command: 'buildAndPush'
    Dockerfile: 'code/complete/GraphQL/dockerfile'
    buildContext: 'code/complete/GraphQL'
- task: Kubernetes@1
  displayName: "Deploy Demo Service"
  inputs:
    connectionType: 'Kubernetes Service Connection'
    kubernetesServiceEndpoint: '$(aks-cluster)'
    namespace: 'ccc-oss'
    command: 'apply'
    useConfigurationFile: true
    configurationType: 'inline'
    inline: |
      apiVersion: apps/v1
      kind: Deployment
      metadata:
        name: ccc-oss-graphqlworkshop
      spec:
        replicas: 3
        selector:
          matchLabels:
            app: ccc-oss-graphqlworkshop
        template:
          metadata:
            labels:
              app: ccc-oss-graphqlworkshop
          spec:
            containers:
              - image: $(container-registry-domain)/ccc-oss-graphqlworkshop:$(Build.BuildId)
                resources:
                  limits:
                    memory: "128Mi"
                    cpu: "500m"
                  requests:
                    memory: "64Mi"
                    cpu: "1m"
                name: ccc-oss-graphqlworkshop
                ports:
                  - containerPort: 80
                startupProbe:
                  httpGet:
                    path: /graphql/?query=%7Bsessions%7Bnodes%7Btitle%7D%7D%7D
                    port: 80
                  failureThreshold: 30
                  periodSeconds: 10

      ---
      apiVersion: v1
      kind: Service
      metadata:
        name: ccc-oss-graphqlworkshop
      spec:
        type: ClusterIP
        ports:
        - port: 80
        selector:
          app: ccc-oss-graphqlworkshop
    secretType: 'dockerRegistry'
    containerRegistryType: 'Azure Container Registry'
- task: Kubernetes@1
  displayName: "Deploy Demo Ingress Configuration"
  inputs:
    connectionType: 'Kubernetes Service Connection'
    kubernetesServiceEndpoint: '$(aks-cluster)'
    command: 'apply'
    useConfigurationFile: true
    configurationType: 'inline'
    inline: |
      apiVersion: networking.k8s.io/v1
      kind: Ingress
      metadata:
        name: ccc-oss-graphqlworkshop-ingress
        namespace: ccc-oss
        annotations:
          kubernetes.io/ingress.class: nginx
          nginx.ingress.kubernetes.io/proxy-buffering: "on"
          nginx.ingress.kubernetes.io/proxy-buffer-size: "128k"
          nginx.ingress.kubernetes.io/proxy-buffers: "4 256k"
          nginx.ingress.kubernetes.io/proxy-busy-buffers-size: "256k"
          nginx.ingress.kubernetes.io/client-header-buffer-size: "64k"
          nginx.ingress.kubernetes.io/http2-max-field-size: "16k"
          nginx.ingress.kubernetes.io/http2-max-header-size: "128k"
          nginx.ingress.kubernetes.io/large-client-header-buffers: "128k"
          nginx.ingress.kubernetes.io/proxy-buffers-number: "4"
      spec:
        tls:
        - hosts:
          - workshop.chillicream.cloud
          secretName: management-tls
        rules:
        - host: workshop.chillicream.cloud
          http:
            paths:
            - path: /
              pathType: Prefix
              backend:
                service:
                  name: ccc-oss-graphqlworkshop
                  port:
                    number: 80
    secretType: 'dockerRegistry'
    containerRegistryType: 'Azure Container Registry'
